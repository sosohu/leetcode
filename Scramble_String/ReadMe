
Q	Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

	Below is one possible representation of s1 = "great":

	    great
	   /    \
	  gr    eat
	 / \    /  \
	g   r  e   at
	           / \
	          a   t
	To scramble the string, we may choose any non-leaf node and swap its two children.

	For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

	    rgeat
	   /    \
	  rg    eat
	 / \    /  \
	r   g  e   at
	           / \
	          a   t
	We say that "rgeat" is a scrambled string of "great".

	Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

	    rgtae
	   /    \
	  rg    tae
	 / \    /  \
	r   g  ta  e
    	   / \
    	  t   a
	We say that "rgtae" is a scrambled string of "great".

	Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

A	as for string s1, s2 with length is n

	set data[i][j][k]: i is the start of s1, j is the start of s2, k is the length
			means wheather s2[j,j+k] is the scrambled string of s1[i, i+k]

	so, we have the recursive way: data[i][j][k] = ((data[i][j][1] && data[i+1][j+1][k-1]) 
														|| data[i][j+k-1][1] && data[i+1][j][k-1])
												||	((data[i][j][2] && data[i+2][j+2][k-2]) 
														|| data[i][j+k-2][2] && data[i+2][j][k-2])
												...
												||	((data[i][j][k-1] && data[i+k-1][j+k-1][1]) 
														|| data[i][j+1][k-1] && data[i+k-1][j][1])

	so, we can construct it level by level

	return data[0][0][n-1]
