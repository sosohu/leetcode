#include <iostream>
#include <string>
#include <vector>

using namespace std;


class Solution {

public:

	int recursion(vector<vector<int> >& triangle, int level, int pos, int size, int deliver){
		int val = triangle[level][pos];

		if(level == size -1)
			return val;
		int left = 0, right = 0;
		int left_deliver = 0, right_deliver = 0;
		
		if(pos == 0)
			left = recursion(triangle, level + 1, pos, size, left_deliver);
		else
			left = 

		right = recursion(triangle, level + 1, pos + 1, size, right_deliver);

		int ret =  left < right? left : right;
		
		return ret + val;
		
	}

	int minimumTotal(vector<vector<int> > &triangle) {
		int size = triangle.size();
		if(size == 0)	return 0;
		return recursion(triangle, 0, 0, size);
    }

};

int main(int argc, char** argv)
{
	Solution sl;
	vector<vector<int> > tree;
	int data[] = {2,3,4,6,5,7,4,1,8,3};
	int i = 0, count = 1;
	while(i < 10){
		vector<int> vec;
		for(int j = i; j < i + count; j++){
			vec.push_back(data[j]);
		}
		tree.push_back(vec);
		i = i + count;
		count++;
	}

    int ret = sl.minimumTotal(tree);
	
	cout<<"Result  :("<<ret<<")"<<endl;

	return 0;

}
