#include <iostream>
#include <string>
#include <unordered_set>
#include <queue>
#include <vector>

using namespace std;


class Solution {

public:

void Trace(string start, string str, vector<vector<string> >& path,
			unordered_map<string vector<string> > father){
	}

	vector<vector<string> > findLadders(string start, string end, unordered_set<string> &dict) {
		int len = start.length();
		unordered_set<string> find;
		//vector<string> data;
		vector<vector<string> > path;
		//vector<int> trace;
		unordered_map<string, vector<string> > tree;
		unordered_map<string, vector<string> > father;
		queue<string> data;
		
		find.insert(start);
		data.push(start);
		string str, tmp;
		int len = start.length();
		while(!data.empty()){

			int size = data.size();
			for(int k = 0; k < size(); k++){

			str = data.front();
			data.pop();

			if(str.compare(end) == 0){
				Trace(start, str, path);
				
			}

			vector<string> vec;
			tree[str] = vec;
			father[str] = vec;
			unordered_set<string> cur;
			for(int i = 0; i < len; i++){
				tmp = str;
				for(int j = 97; j < 123; j++){
					tmp[i] = j;
						if(dict.count(tmp) == 1 && find.count(tmp) == 0){
							data.push(tmp);
							cur.insert(tmp);
							tree[str].push_back(tmp);
							father[tmp].push_back(str);
						}
					}
				}
			}
			find = cur;
		}

		return path;
	}

};

int main(int argc, char** argv)
{
	Solution sl;
	unordered_set<string> dict;
	string data[] = {"miss","dusk","kiss","musk","tusk","diss","disk","sang","ties","muss"};
	for(int i = 0; i < 10; i++)
		dict.insert(data[i]);
    vector<vector<string> > ret = sl.findLadders("kiss", "tusk", dict);
	
	for(int i = 0; i < ret.size(); i++){
		for(int j = 0; j < ret[i].size(); j++)
			cout<<ret[i][j]<<" ";
		cout<<endl;
	}

	return 0;

}
