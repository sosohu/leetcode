

Q	Say you have an array for which the ith element is the price of a given stock on day i.
	Design an algorithm to find the maximum profit. You may complete at most two transactions.

	Note:
	You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

A	suppose sum[1,n] is a[1],...,a[n]'s profit with at most two buy and two sell;
	suppose s[1,n] is a[1],...,a[n]'s profit with only one buy and one sell;

	sum[1,n] = max { s[1,i] + s[i+1, n] }  1 <= i <= n  ;  O(n)

	so, it is a DP problem
	

	BTW, s[1.k] can be computed by DP , too
	suppose min[1,n] is a[1],...,a[n]'s min one;
	
	s[1,k] = max{s[1,k-1], s[k] - min[1, k-1]};          O(n)
	as you can see, s[k, n] can also be solved by the similar way
